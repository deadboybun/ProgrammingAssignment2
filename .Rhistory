x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
library(swirl)
swirl()
dir.create("testdir")
setcd("testdir")
setwd("~/testdir")
setwd("testdir")
setwd("testdir")
setwd("testdir")
setwd("testdir")
setwd("~/")
setwd("testdir")
file.create("mytest.R")
ls
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
dir.create("testdir2/testdir3", recursive = True)
dir.create("testdir2/testdir3", recursive = TRUE)
file.remove("testdir2")
unlink("testdir2/", recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir/")
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?:
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect = c(0.5, 55, 10, 6)
?c
num_vect <- c(0.5, 55, 10, 6)
num_vect <- c(0.5, 55.0, 10.0, 6.0)
info()
num_vect <- c(0.5, 55, -10, 6)
tf = num_vect < 1
tf <- num_vect < 1
tf
a <- num_vect >= 6
a <- num_vect => 6
a <- num_vect >= 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "bun")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
c("X", "Y", "Z")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
c(44, NA, 5, NA)
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x <- rnorm(20)
x <- c(rnorm(20), rep(NA, x = 20))
rep(NA, x = 20)
x <- c(rnorm(20), rep(NA, times = 20))
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
2
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect[bar]
vect["bar"]
vect[c("foo","bar")]
1:20
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) < c(4, 5)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
>matrix
?matrix
my_matrix2 = matrix(4,5)
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cname(my_data) <- c("paitent", "age", "weight", "bp", "rating", "test")
cnames <- c("paitent", "age", "weight", "bp", "rating", "test")
cnames <- c("paitent", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_matrix) <- cnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 ==7
6 < 7
10 <= 10
5 != 7
5 == 7
! 5 == 7
FALSe & FALSE
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints)
any(ints < 0)
all(ints > 0)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags)
cls_list <- lapply(flags)
cls_list <- lapply(flags, class(flags))
cls_list <- lapply(flags, class
)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
setwd("C:/Users/bun/Desktop/Data Science/R Programming/assignment2")
source("cachematrix.R")
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) );
a$getMatrix();
a$get();
cacheSolve(a)
cacheSolve(a)
unzip
